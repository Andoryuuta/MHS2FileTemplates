//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: rBattleBinary (.btb)
//   Authors: github.com/Andoryuuta
//   Version: 1
//   Purpose: Structure-only RE of the file.
//  Category: 
// File Mask: 
//  ID Bytes: 52 74 62 00
//   History: 
//------------------------------------------------

#include "rBattleBinary_btb_hashes.bt"

struct {
    uint32 magic;
    uint32 version;
} FileHeader;

typedef struct {
    uint32 field_0;
    uint32 entry_count;
    
    typedef struct{
        uint32 field_2;
        uint32 field_3_count;
        uint16 field_3[field_3_count];
        uint32 field_4_count;
        int32 field_4[field_4_count];
        uint32 field_5_count;
        byte field_5[field_5_count];
    } atelscr_subentry <optimize=false>;
    atelscr_subentry entries [entry_count];

    byte pad[0x30];    

} Atelscr <optimize=false>;

typedef struct {
    struct{
        byte data[22];
    } entries[18];

} NpcAI <optimize=false>;


typedef struct {
    uint16 count;

    typedef struct{
        byte field1;
        uint16 field2;
        uint16 field3;
        uint16 field4;
        uint16 field5;
        uint16 field6;
        uint16 field7;
        uint16 field8;
        uint16 field9;
        uint16 field10;
        uint16 field11;
        uint16 field12;
        uint16 field13;
        uint16 field14;
        uint16 field15;
        uint16 field16;
        uint16 field17;
        uint16 field18;
        uint32 field19;
        uint16 field20;
        byte field21;
    } HunterData_subentry <optimize=false>;
    HunterData_subentry entries[count] <optimize=false>;
} HunterData <optimize=false>;

typedef struct {
    uint16 count;

    typedef struct{
        uint16 field0;
        uint16 field1;
    } AdjustData_subentry <optimize=false>;
    AdjustData_subentry entries[count] <optimize=false>;
} AdjustData <optimize=false>;

typedef struct {
    uint16 count;
    typedef struct{
        uint32 data[15];
    } MonsterBaseData_subentry <optimize=false>;
    MonsterBaseData_subentry entries[count] <optimize=false>;
} MonsterBaseData <optimize=false>;

typedef struct {
    uint16 count;

    typedef struct{
        uint16 field0;
        
        byte field1;
        byte field2;
        byte field3;
        byte field4;
        byte field5;
        byte field6;
        byte field7;
        byte field8;
        byte field9;
        byte field10;
        byte field11;
        byte field12;
        byte field13;
        byte field14;
        byte field15;
        byte field16;
        byte field17;
        byte field18;
        byte field19;
        byte field20;
        byte field21;

        uint16 field22;
        uint16 field23;
        uint16 field24;
        uint16 field25;
        uint16 field26;
        uint16 field27;
        uint16 field28;
        uint16 field29;
        uint16 field30;
        uint16 field31;
        uint16 field32;
        uint16 field33;
        uint16 field34;
        uint16 field35;
        uint16 field36;
        uint16 field37;
        uint16 field38;

        struct {
            uint16 field0;
            uint16 field1;
            uint16 field2;
            uint16 field3;
            uint16 field4;
            uint16 field5;
            uint16 field6;
            uint16 field7;
            uint16 field8;
            uint16 field9;
            uint16 field10;
            uint16 field11;
            uint16 field12;
            uint16 field13;
            uint16 field14;
            uint16 field15;
        } subentries[5];

        byte field39;
        uint16 field40;
        byte field41;
        uint16 field42;
        uint16 field43;
        byte field44;
        byte field45;
        byte field46;

    } OtomonData_subentry <optimize=false>;
    OtomonData_subentry entries[count] <optimize=false>;

} OtomonData <optimize=false>;

typedef struct {
    uint16 count;
    typedef struct{
        uint16 field0;
        byte field1;
        uint16 field2;
        uint16 field3;
        uint16 field4;
        uint16 field5;
        uint16 field6;
        uint16 field7;
        uint16 field8;
        uint16 field9;
        uint16 field10;
        uint16 field11;
        uint16 field12;
        uint16 field13;
        uint16 field14;
        uint16 field15;
        byte field16;

    } PartsData_subentry <optimize=false>;
    PartsData_subentry entries[count] <optimize=false>;
} PartsData <optimize=false>;

typedef struct {
    uint16 count;
    typedef struct{
        byte field0;
        uint16 field1;
        uint16 field2;
        uint16 field3;
        uint16 field4;
        uint16 field5;
        uint16 field6;
        uint16 field7;
        uint16 field8;
        uint16 field9;
        uint16 field10;
        uint16 field11;
        uint16 field12;
        uint16 field13;
        uint16 field14;
        uint16 field15;
        uint16 field16;
        uint16 field17;
        uint32 field18;
        uint16 field19;
        byte field20;
    } PlayerData_subentry <optimize=false>;
    PlayerData_subentry entries[count] <optimize=false>;
} PlayerData <optimize=false>;

typedef struct {
    uint32 data_size;
    uint32 filepath_crc <read=ReadBTBCRC>;
    local string path = GetBtbPathFromHash(filepath_crc);
    
    if(
        Strstr(path, "atelscrRush") != -1 ||
        Strstr(path, "atelscr") != -1 ||
        Strstr(path, "testatel") != -1
      ) {
        Atelscr atel;
    } else if (path == "battleparm\\HunterData.bin") {
        HunterData hunter_data;
    } else if (path == "battleparm\\adjustData.bin") {
        AdjustData adjust_data;
    } else if (path == "battleparm\\MonsterBaseData.bin") {
        MonsterBaseData monster_base_data;
    } else if (path == "battleparm\\OtomonData.bin") {
        OtomonData otomon_data;
    } else if (path == "battleparm\\PartsData.bin") {
        PartsData parts_data;
    } else if (path == "battleparm\\PlayerData.bin") {
        PlayerData player_data;
    } else if (path == "battleai\\npcai.bin") {
        NpcAI npcai;
    } else {
        byte data[data_size];
    }
} Entry <optimize=false>;

typedef struct {
    uint32 count;

    local int i;
    for(i=0; i < count; i++){
        Entry entry <read=ReadEntry>;
    }
} EntryList <optimize=false>;


EntryList battleai_entries;
EntryList battleparm_entries;


// Display/Reader functions below.
string ReadEntry(Entry& e) {
    string s;
    SPrintf(s, "File: %s", GetBtbPathFromHash(e.filepath_crc));
    return s;
};

string ReadBTBCRC(uint32 hash) {
    string s;
    SPrintf(s, "%X (%s)", hash, GetBtbPathFromHash(hash));
    return s;
};